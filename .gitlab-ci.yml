stages:
  - frontend
  - backend

# Frontend: node + pnpm
frontend:
  image: docker.io/library/node:22
  stage: frontend
  variables:
    CI: "true"
  before_script:
    - corepack enable
    - corepack prepare pnpm@10 --activate
    - cd app
    - pnpm install
  script:
    - pnpm run format
    - pnpm run lint
    - pnpm run type
    - pnpm run test:ci
    - pnpm run build
  artifacts:
    when: always
    paths:
      - app/dist
      - app/coverage

# Backend: Python (uses uv to sync + run tasks as in GitHub Actions)
backend:
  image: ghcr.io/astral-sh/uv:debian
  stage: backend
  variables:
    PIP_NO_CACHE_DIR: "false"
  before_script:
    - cd api
    - uv sync --dev
  script:
    - uv run --no-env-file -- ruff format .
    - uv run --no-env-file -- ruff check .
    - uv run --no-env-file -- pyright --project . --warnings || true
    - mkdir -p report
    - uv run --no-env-file -- pytest -q --junitxml=coverage/junit.xml --cov=. --cov-report=xml:coverage/coverage.xml --cov-report=html:coverage/coverage_html
  artifacts:
    when: always
    paths:
      - api/.pytest_cache
      - api/coverage/junit.xml
      - api/coverage/coverage.xml
      - api/coverage/coverage_html
    expire_in: 7 days
    reports:
      junit: api/coverage/junit.xml
